{shebang}
{scheduler_directives}
#
# variables that should be subsituted
#   * shebang, shebang for this script ({shebang})
#   * scheduler_directives
#   * worker_path ({worker_path})
#   * server_info ({server_info})
#   * server_log_opt, e.g., --log path_to_log_file ({server_log_opt})
#   * port_opt, e.g., --port 1234 ({port_opt})
#   * server_start_delay, 5 (in seconds) ({server_start_delay})
#   * workfile ({workfile})
#   * client_log_prefix_opt, e.g., --log_prefix client_log_prefix ({client_log_prefix_opt})
#   * env_var_exprs, e.g., '^VSC' '^PBS_' ({env_var_exprs})
#   * num_cores ({num_cores})
#   * exit_on_client_fail, i.e., true or false ({exit_on_client_fail})
#

# source worker software environment variables (LD_LIBRARY_PATH et al.)
source "{worker_path}/conf/worker_env.sh"

# source worker functions used in this script
source "{worker_path}/scripts/worker_functions.sh"

# file to store the server details
SERVER_INFO={server_info}

# start the server
srun --exclusive --nodes=1 --ntasks=1 --cpus-per-task=1 \
    "{worker_path}/bin/worker_server" \
        {server_log_opt} \
        {port_opt} \
        --workfile "{workfile}" \
        --server_info "$SERVER_INFO" &
server_exit=$?
if [ $server_exit -ne 0 ]
then

    (>&2 echo "### error: failed to launch server")
    exit $server_exit
fi

# ensure it is up and running and check whether it is actually up
sleep {server_start_delay}
if [ ! -f "$SERVER_INFO" ]
then
    (>&2 echo "### error: failed to launch server, no server info file created")
    exit 1
fi

# determine the server address and UUID for the clients to use
uuid=$(cut -d ' ' -f 1 "$SERVER_INFO")
server=$(cut -d ' ' -f 2 "$SERVER_INFO")

(>&2 echo "### info: server launched at '$server' with UUID '$uuid'")

export OMP_PROC_BIND=true
export OMP_PLACES=cores

for (( client_id=1; client_id <= $SLURM_NTASKS_HET_GROUP_1; client_id++ ))
do
    srun --exclusive --het-group=1 \
        --ntasks=1 --nodes=1 --cpus-per-task=$SLURM_CPUS_PER_TASK_HET_GROUP_1 \
        --threads-per-core=1 \
            "{worker_path}/bin/worker_client" \
                --server "$server" --uuid "$uuid" {client_log_prefix_opt} \
                $numactl_opt --host_info "$host_info" &
    client_exit=$?
    if [ $client_exit -eq 0 ]
    then
        (>&2 echo "### info: client $client_id launched")
    else
        (>&2 echo "### error: client $client_id failed to launch, exit status $client_exit")
        if [ {exit_on_client_fail} ]
        then
            exit $client_exit
        fi
    fi
done

# wait for the server to finish
wait
