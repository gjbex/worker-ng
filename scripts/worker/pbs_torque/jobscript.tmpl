{shebang}
{scheduler_directives}
#
# variables that should be subsituted
#   * shebang, shebang for this script ({shebang})
#   * scheduler_directives
#   * worker_path ({worker_path})
#   * server_info ({server_info})
#   * server_log_opt, e.g., --log path_to_log_file ({server_log_opt})
#   * port_opt, e.g., --port 1234 ({port_opt})
#   * server_start_delay, 5 (in seconds) ({server_start_delay})
#   * workfile ({workfile})
#   * client_log_prefix_opt, e.g., --log_prefix client_log_prefix ({client_log_prefix_opt})
#   * env_var_exprs, e.g., '^VSC' '^PBS_' ({env_var_exprs})
#   * num_cores ({num_cores})
#   * exit_on_client_fail, i.e., true or false ({exit_on_client_fail})
#

# source worker software environment variables (LD_LIBRARY_PATH et al.)
env_conf_file="{worker_path}/conf/worker_env.sh"
if [ ! -e "${{env_conf_file}}" ]
then
    (>&2 echo "### error: can not read environment configuration file '${{env_conf_file}}'")
    exit 1
fi
source "${{env_conf_file}}"

# source worker functions used in this script
source "{worker_path}/scripts/worker_functions.sh"

# file to store the server details
SERVER_INFO={server_info}

# start the server
"{worker_path}/bin/worker_server" \
    {server_log_opt} \
    {port_opt} \
    --workfile "{workfile}" \
    --server_info "{server_info}" &
server_exit=$?
if [ $server_exit -ne 0 ]
then

    (>&2 echo "### error: failed to launch server")
    exit $server_exit
fi

# ensure it is up and running
sleep {server_start_delay}

# determine the server address and UUID for the clients to use
uuid=$(cut -d ' ' -f 1 $SERVER_INFO)
server=$(cut -d ' ' -f 2 $SERVER_INFO)

(>&2 echo "### info: server launched at '$server' with UUID '$uuid'")

# determine log directory


# environment variables will not be available on non-server nodes,
# so they need to be passed to the client explicitly
env_variables=$(compute_env_vars {env_var_exprs})

# launch clients
nodes=($(cat $PBS_NODEFILE))
if [ -z "$num_cores" ]
then
    num_cores=1
fi
num_clients=$(( ${{#nodes[@]}} / $num_cores ))

# compute numactl arguments
numactl_args=( $( compute_numactl_args $num_cores $nodes ) )
numactl_status=$?

for (( client_num=0; client_num < num_clients; client_num++ ))
do
    (>&2 echo "### info: launching client $client_num")
    client_nodes=(${{nodes[@]:$(( client_num*num_cores )):$num_cores}})
    host_info=$( compute_host_file $num_cores $client_nodes )
    numactl_opt=''
    if [ $numactl_status ]
    then
        numactl_opt="--numactl ${{numactl_args[$client_num]}}"
    fi
    ssh ${{client_nodes[0]}} << EOF
        source "{worker_path}/conf/worker_env.sh";
        nohup "{worker_path}/bin/worker_client" \
            --server "$server" --uuid "$uuid" {client_log_prefix_opt} \
            $env_variables $numactl_opt --host_info "$host_info" >> nohup.txt &
EOF
    client_exit=$?
    if [ $client_exit -eq 0 ]
    then
        (>&2 echo "### info: client launched on '${{client_nodes[0]}}'")
    else
        (>&2 echo "### error: client failed to launch on '${{client_nodes[0]}}', exit status $client_exit")
        if [ {exit_on_client_fail} ]
        then
            exit $client_exit
        fi
    fi
done
(>&2 echo "### info: all clients launched")

# wait for the server to finish
wait
